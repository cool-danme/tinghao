集合的特点：提供了一种存储空间可变的存储模型，，数据容量可随时发生改变。
          集合有单列集合（Collection），双列集合(Map)；单列集合又包括List（可重复）集合与Set(不可重复集合)
          注：这些集合都是接口，并不能直接创建对象并使用，所以只能通过实现类来创建对象。
          List下有，ArrayList、LinkedList等；
          Set下重点学习HashSet,TreeSet(学习的这些都是实现类，上一级都是接口)
          Map下主要学习HashMap
          先学习接口，再学习实现类
         
       
       
      Collection基本使用方法：
                            package tinghao03;

                            import java.util.ArrayList;
                            import java.util.Collection;

                            /*
                            * 创建Collection集合的对象
                            * 以多态的形式
                            * ArrayList
                            * */
                            public class CollectionDemo {
                                public static void main(String[] args) {
                                    //创建对象
                                    Collection<String> c=new ArrayList<String>();
                                    //添加元素boolean add(E,e);E就是C<String>里面的String
                                    c.add("java");
                                    c.add("hello");
                                    c.add("庭好");
                                    //输出集合对象
                                    System.out.println(c);
                                }
                            }
      Collection集合常用方法：
                                  package tinghao04;

                            import java.util.ArrayList;
                            import java.util.Collection;

                            public class CollectionDemo02 {
                                public static void main(String[] args) {
                                    //先创建对象
                                    Collection<String> c=new ArrayList<String>();//为什么都是true,ctrl+b,alt+7可以查看类的所有信息
                                    //使用boolean add(E,e)
                                    ///*System.out.println(c.add("hello"));//true
                                    //System.out.println(c.add("world"));//true
                                    //System.out.println(c.add("world"));//true*/
                                    //查看add方法发现永远返回true所以，直接用add
                                    c.add("hello");
                                    c.add("world");
                                    c.add("world");


                                    //remove(Object o)从此 collection 中移除指定元素的单个实例，如果存在的话（可选操作）。
                                   // System.out.println(c.remove("world"));//true
                                    //System.out.println(c.remove("javaee"));//false
                                    //void clear()移除此 collection 中的所有元素,因为是void所以直接调用
                                    //c.clear();//false []
                                    // boolean contains(Object o)如果此 collection 包含指定的元素，则返回 true。
                            //        System.out.println(c.contains("hello"));//true
                            //        System.out.println(c.contains("javaee"));//false
                            //        boolean isEmpty()如果此 collection 不包含元素，则返回 true。
                            //        System.out.println(c.isEmpty());//false,所以不为空，再把clear注释去掉试一下，结果为true；
                            //        int size()返回此 collection 中的元素数。
                                    System.out.println(c.size());//3
                                    //输出集合对象
                                    System.out.println(c);//[hello] [hello, world, world]
                                }
                            }
     --------------------------------------------------------------------------------------------------------
                 集合的遍历：
                                  package tinghao01;

                              import java.util.ArrayList;
                              import java.util.Collection;
                              import java.util.Iterator;
                              //Iterator:迭代器，集合的专用遍历方式，
                              //Iterator中的常用方法：E next():返回迭代中的下一个元素
                              //boolean hasNext():如果迭代具有更多元素，则返回true

                              public class IteratorDemo {
                                  public static void main(String[] args) {
                                      //创建集合对象
                                      Collection<String> c=new ArrayList<String>();
                                      //添加元素
                                      c.add("hello");
                                      c.add("world");
                                      c.add("java");
                                      //通过集合的iterator()方法得到
                                      Iterator<String> it = c.iterator();//此泛型与Collection中的泛型一样
                                      //通过多态的方式得到的对象
                                      /*
                                      *public Iterator<E> iterator() {
                                          return new Itr();
                                      }
                                      *
                                      * private class Itr implements Iterator<E>{
                                      *       ...
                                      * }
                                      * */
                              //        /*System.out.println(it.next());
                              //        System.out.println(it.next());
                              //        System.out.println(it.next());
                              //        System.out.println(it.next());//NoSuchElementException被各种访问器方法抛出，表示被请求的元素不存在。
                              //*/
                              //        if (it.hasNext()){
                              //            System.out.println(it.next());
                              //        }
                              //        if (it.hasNext()){
                              //            System.out.println(it.next());
                              //        }
                              //        if (it.hasNext()){
                              //            System.out.println(it.next());
                              //        }
                              //        if (it.hasNext()){
                              //            System.out.println(it.next());//如果还有元素，就返回true，如果哦哦没有元素，就返回false，进不去sout
                              //        }
                                      //用while循环改进
                                      while (it.hasNext()){
                              //            System.out.println(it.next());
                                          String n = it.next();
                                          System.out.println(n);
                                      }


                                  }
                              }
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
存储学生对象并遍历：
                                               package tinghao02;

                              import java.util.ArrayList;
                              import java.util.Collection;
                              import java.util.Iterator;

                              public class CollectionDemo {
                                  public static void main(String[] args) {
                                      //创建Collection对象
                                      Collection<Student> c=new ArrayList<Student>();
                                      //创建学生对象
                                      Student s=new Student("林青霞",30);
                                      Student s1=new Student("张三",10);
                                      Student s2=new Student("王二",20);
                                      //把学生添加到集合
                                      c.add(s);
                                      c.add(s1);
                                      c.add(s2);
                                      //遍历集合(迭代器的方式)
                                      Iterator<Student> it = c.iterator();
                                      while(it.hasNext()){
                                          Student n = it.next();
                                          System.out.println(n.getName()+","+n.getAge());
                                      }

                                  }
                              }

